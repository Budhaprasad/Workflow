name: Project Issue Status Automation

on:
  workflow_dispatch:

permissions:
  issues: write
  contents: read
  actions: read
  pull-requests: read

jobs:
  manage-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const regex = /#(\d+)/gi;

            // 1. Get open issues
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner,
              repo,
              state: 'open',
              per_page: 100
            });

            for (const issue of issues) {
              console.log(`🔍 Checking issue #${issue.number}: ${issue.title}`);

              const matches = [...(issue.body || "").matchAll(regex)];
              const blockingIssues = matches.map(m => parseInt(m[1]));
              let activeBlockers = [];

              for (const ref of blockingIssues) {
                try {
                  const refIssue = await github.rest.issues.get({ owner, repo, issue_number: ref });
                  if (refIssue.data.state === 'open') {
                    activeBlockers.push(ref);
                  }
                } catch (err) {
                  console.warn(`⚠️ Could not fetch issue #${ref}`);
                }
              }

              // Clean up comment or body
              const updatedBody = (issue.body || "").replace(regex, (match, num) => {
                return activeBlockers.includes(parseInt(num)) ? match : '';
              }).trim();

              if (updatedBody !== issue.body) {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: updatedBody
                });
                console.log(`🧹 Cleaned closed issue references in #${issue.number}`);
              }

              // Fetch current project status
              const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                owner,
                repo,
                issue_number: issue.number
              });

              const lastStatusEvent = timeline.reverse().find(e => e.event === 'labeled' && e.label.name.startsWith('status:'));
              const currentStatus = issue.labels.find(l => l.name.startsWith('status:'))?.name || 'status:To-Do';
              const previousStatus = lastStatusEvent?.label.name || 'status:To-Do';

              // Determine desired status
              if (activeBlockers.length > 0 && currentStatus !== 'status:Blocked') {
                // Save current status before blocking
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issue.number,
                  labels: ['status:Blocked']
                });
                if (currentStatus !== 'status:Blocked') {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: issue.number,
                    name: currentStatus
                  }).catch(() => {});
                }
                console.log(`🛑 Set issue #${issue.number} status to Blocked`);
              } else if (activeBlockers.length === 0 && currentStatus === 'status:Blocked') {
                // Restore previous status
                const statusToRestore = previousStatus !== 'status:Blocked' ? previousStatus : 'status:To-Do';
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: issue.number,
                  labels: [statusToRestore]
                });
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: issue.number,
                  name: 'status:Blocked'
                }).catch(() => {});
                console.log(`✅ Restored issue #${issue.number} status to ${statusToRestore}`);
              } else {
                console.log(`ℹ️ No status change needed for #${issue.number}`);
              }
            }
